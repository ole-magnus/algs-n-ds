/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package io.aker

import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import org.scalacheck.Arbitrary.arbitrary
import org.scalacheck.Gen
import org.scalacheck.Shrink
import org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks

class BinarySearchSpec extends AnyFlatSpec with Matchers with ScalaCheckDrivenPropertyChecks {
  import BinarySearchSpec._

  "BinarySearch" should "return true when found and false when not" in {
    implicit def noShrink[T]: Shrink[T] = Shrink.shrinkAny
    forAll(binarySearchGen) { case (array, present, notPresent) =>
      BinarySearch.search(notPresent, array) shouldEqual false 
      BinarySearch.search(present, array) shouldEqual true
    }
  }
}

object BinarySearchSpec {
  val binarySearchGen: Gen[(Array[Int], Int, Int)] = for {
    array <- Gen.nonEmptyContainerOf[Set, Int](arbitrary[Int]).map(_.toArray.sorted)
    presentInts <- Gen.oneOf(array)
    notPresentInts <- arbitrary[Int].suchThat(!array.contains(_))
  } yield (array, presentInts, notPresentInts)
}